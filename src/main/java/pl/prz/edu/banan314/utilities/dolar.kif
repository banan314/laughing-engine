;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; dolar
;;; based on go and reversi
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; components
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (role black)
  (role white)

  ( <= (base (passed ?role))
       (role ?role))

  (<= (base (cell ?x ?y ?p)) (index ?x) (index ?y) (piece ?p))
  (base (control black))
  (base (control white))

  ( <= (base (step ?k))
   (succ ?k ?o))

  (<= (input ?p noop) (role ?p))
  (<= (input ?r (mark ?m ?n)) (role ?r) (index ?m) (index ?n))

  (index 1)
  (index 2)
  (index 3)
  (index 4)
  (index 5)
  (index 6)
  (index 7)
  (index 8)
  (index 9)

  (<= (piece ?p)
    (role ?p))

  (piece empty)

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Initial State
;;;;;;;;;;;;;;;;;;;;;;;;;

(init (step 1))

(init(cell 1 1 white)) 
(init(cell 1 1 empty)) 
(init(cell 1 2 empty)) 
(init(cell 1 3 empty)) 
(init(cell 1 4 empty)) 
(init(cell 1 5 empty)) 
(init(cell 1 6 empty)) 
(init(cell 1 7 empty)) 
(init(cell 1 8 empty)) 
(init(cell 1 9 empty)) 
(init(cell 2 1 empty)) 
(init(cell 2 2 empty)) 
(init(cell 2 3 empty)) 
(init(cell 2 4 empty)) 
(init(cell 2 5 empty)) 
(init(cell 2 6 empty)) 
(init(cell 2 7 empty)) 
(init(cell 2 8 empty)) 
(init(cell 2 9 empty)) 
(init(cell 3 1 empty)) 
(init(cell 3 2 empty)) 
(init(cell 3 3 empty)) 
(init(cell 3 4 empty)) 
(init(cell 3 5 empty)) 
(init(cell 3 6 empty)) 
(init(cell 3 7 empty)) 
(init(cell 3 8 empty)) 
(init(cell 3 9 empty)) 
(init(cell 4 1 empty)) 
(init(cell 4 2 empty)) 
(init(cell 4 3 empty)) 
(init(cell 4 4 empty)) 
(init(cell 4 5 empty)) 
(init(cell 4 6 empty)) 
(init(cell 4 7 empty)) 
(init(cell 4 8 empty)) 
(init(cell 4 9 empty)) 
(init(cell 5 1 empty)) 
(init(cell 5 2 empty)) 
(init(cell 5 3 empty)) 
(init(cell 5 4 empty)) 
(init(cell 5 5 empty)) 
(init(cell 5 6 empty)) 
(init(cell 5 7 empty)) 
(init(cell 5 8 empty)) 
(init(cell 5 9 empty)) 
(init(cell 6 1 empty)) 
(init(cell 6 2 empty)) 
(init(cell 6 3 empty)) 
(init(cell 6 4 empty)) 
(init(cell 6 5 empty)) 
(init(cell 6 6 empty)) 
(init(cell 6 7 empty)) 
(init(cell 6 8 empty)) 
(init(cell 6 9 empty)) 
(init(cell 7 1 empty)) 
(init(cell 7 2 empty)) 
(init(cell 7 3 empty)) 
(init(cell 7 4 empty)) 
(init(cell 7 5 empty)) 
(init(cell 7 6 empty)) 
(init(cell 7 7 empty)) 
(init(cell 7 8 empty)) 
(init(cell 7 9 empty)) 
(init(cell 8 1 empty)) 
(init(cell 8 2 empty)) 
(init(cell 8 3 empty)) 
(init(cell 8 4 empty)) 
(init(cell 8 5 empty)) 
(init(cell 8 6 empty)) 
(init(cell 8 7 empty)) 
(init(cell 8 8 empty)) 
(init(cell 8 9 empty)) 
(init(cell 9 1 empty)) 
(init(cell 9 2 empty)) 
(init(cell 9 3 empty)) 
(init(cell 9 4 empty)) 
(init(cell 9 5 empty)) 
(init(cell 9 6 empty)) 
(init(cell 9 7 empty)) 
(init(cell 9 8 empty)) 
(init(cell 9 9 black))

(init(control white))

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Legal Moves
;;;;;;;;;;;;;;;;;;;;;;;;;

  (legal white noop)
  (legal black noop)

(<= (legal ?player (mark ?x ?y))
    (true (cell ?x ?y empty))
    (neighbor ?x ?y ?M ?N)
    (true (cell ?M ?N ?player))
    (true (control ?player)))

(<= (legal x noop)
    (true (control o)))

(<= (legal o noop)
    (true (control x)))

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dynamic Components - next
;;;;;;;;;;;;;;;;;;;;;;;;;
;; Cell
(<= (next (cell ?x ?y ?player))
    (does ?player (mark ?x ?y)))

(<= (next (cell ?x ?y ?mark))
    (true (cell ?x ?y ?mark))
    (does ?player (mark ?m ?n))
    (distinctCell ?x ?y ?m ?n))

(<= (distinctCell ?x ?y ?m ?n)
    (distinct ?x ?m)
    (index ?x)
    (index ?y)
    (index ?m)
    (index ?n))
(<= (distinctCell ?x ?y ?m ?n)
    (distinct ?y ?n)
    (index ?x)
    (index ?y)
    (index ?m)
    (index ?n))

;; Control
(<= (next (control x))
    (true (control o)))
(<= (next (control o))
    (true (control x)))

;; pass
( <= (next (passed ?role))
       (true (control ?role))
       (does ?role noop))

  ( <= (next (passed ?role))
       (true (passed ?role))
       (does ?role noop))

;; step
( <= (next (step ?n))
   (true (step ?m))
   (succ ?m ?n))

;;;;;;;;;;;;;;;;;;;;;
;;goal
;;;;;;;;;;;;;;;;;;;;;

  ( <= (goal ?role ?score)
       (score ?role ?score))

;;;;;;;;;;;;;;;;;;;;
;;terminal
;;;;;;;;;;;;;;;;;;;;

( <= terminal 
   (true (step 80))) ;invariant: step=n-1, n-number of pieces

( <= terminal
   (true (passed black))
   (true (passed white)))

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Neighbor
;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (neighbor ?M ?N ?M1 ?N1)
    (index ?M) 
    (index ?N)
    (index ?M1) 
    (index ?N1)
    (succ ?M ?M1)
    (succ ?N ?N1)
)
    
(<= (neighbor ?M ?N ?M ?N1)
    (index ?M) 
    (index ?N)
    (index ?N1)
    (succ ?N ?N1)
)

(<= (neighbor ?M ?N ?M1 ?N)
    (index ?M) 
    (index ?N)
    (index ?M1)
    (succ ?M ?M1)
) 

(<= (neighbor ?M ?N ?M1 ?N1)
    (index ?M) 
    (index ?N)
    (index ?M1) 
    (index ?N1)
    (succ ?M1 ?M)
    (succ ?N1 ?N)
)

(<= (neighbor ?M ?N ?M1 ?N1)
    (index ?M) 
    (index ?N)
    (index ?M1) 
    (index ?N1)
    (succ ?M ?M1)
    (succ ?N1 ?N)
)

(<= (neighbor ?M ?N ?M1 ?N1)
    (index ?M) 
    (index ?N)
    (index ?M1) 
    (index ?N1)
    (succ ?M1 ?M)
    (succ ?N ?N1)
)

(<= (neighbor ?M ?N ?M ?N1)
    (index ?M) 
    (index ?N)
    (index ?N1)
    (succ ?N1 ?N)
)

(<= (neighbor ?M ?N ?M1 ?N)
    (index ?M) 
    (index ?N)
    (index ?M1)
    (succ ?M1 ?M)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;; Data ;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(succ 0 1)
  (succ 1 2)
  (succ 2 3)
  (succ 3 4)
  (succ 4 5)
  (succ 5 6)
  (succ 6 7)
  (succ 7 8)
  (succ 8 9)
  (succ 9 10)
  (succ 10 11)
  (succ 11 12)
  (succ 12 13)
  (succ 13 14)
  (succ 14 15)
  (succ 15 16)
  (succ 16 17)
  (succ 17 18)
  (succ 18 19)
  (succ 19 20)
  (succ 20 21)
  (succ 21 22)
  (succ 22 23)
  (succ 23 24)
  (succ 24 25)
  (succ 25 26)
  (succ 26 27)
  (succ 27 28)
  (succ 28 29)
  (succ 29 30)
  (succ 30 31)
  (succ 31 32)
  (succ 32 33)
  (succ 33 34)
  (succ 34 35)
  (succ 35 36)
  (succ 36 37)
  (succ 37 38)
  (succ 38 39)
  (succ 39 40)
  (succ 40 41)
  (succ 41 42)
  (succ 42 43)
  (succ 43 44)
  (succ 44 45)
  (succ 45 46)
  (succ 46 47)
  (succ 47 48)
  (succ 48 49)
  (succ 49 50)
  (succ 50 51)
  (succ 51 52)
  (succ 52 53)
  (succ 53 54)
  (succ 54 55)
  (succ 55 56)
  (succ 56 57)
  (succ 57 58)
  (succ 58 59)
  (succ 59 60)
  (succ 60 61)
  (succ 61 62)
  (succ 62 63)
  (succ 63 64)
  (succ 64 65)
  (succ 65 66)
  (succ 66 67)
  (succ 67 68)
  (succ 68 69)
  (succ 69 70)
  (succ 70 71)
  (succ 71 72)
  (succ 72 73)
  (succ 73 74)
  (succ 74 75)
  (succ 75 76)
  (succ 76 77)
  (succ 77 78)
  (succ 78 79)
  (succ 79 80)
  (succ 80 81)
  (succ 81 82)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; score-counting functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

( <= (score white ?score)
    (count 6 6 ?score))

( <= (score black ?score)
    (count 1 1 ?score))

(<= (count 1 1 ?num)
(true (cell 1 1 black))
(succ ?prevnum ?num)
(count 2 1 ?prevnum))
(<= (count 1 1 ?num)
(not (true (cell 1 1 black)))
(count 2 1 ?num))

(<= (count 2 1 ?num)
(true (cell 2 1 black))
(succ ?prevnum ?num)
(count 3 1 ?prevnum))
(<= (count 2 1 ?num)
(not (true (cell 2 1 black)))
(count 3 1 ?num))

(<= (count 3 1 ?num)
(true (cell 3 1 black))
(succ ?prevnum ?num)
(count 4 1 ?prevnum))
(<= (count 3 1 ?num)
(not (true (cell 3 1 black)))
(count 4 1 ?num))

(<= (count 4 1 ?num)
(true (cell 4 1 black))
(succ ?prevnum ?num)
(count 1 2 ?prevnum))
(<= (count 4 1 ?num)
(not (true (cell 4 1 black)))
(count 1 2 ?num))

(<= (count 1 2 ?num)
(true (cell 1 2 black))
(succ ?prevnum ?num)
(count 2 2 ?prevnum))
(<= (count 1 2 ?num)
(not (true (cell 1 2 black)))
(count 2 2 ?num))

(<= (count 2 2 ?num)
(true (cell 2 2 black))
(succ ?prevnum ?num)
(count 3 2 ?prevnum))
(<= (count 2 2 ?num)
(not (true (cell 2 2 black)))
(count 3 2 ?num))

(<= (count 3 2 ?num)
(true (cell 3 2 black))
(succ ?prevnum ?num)
(count 4 2 ?prevnum))
(<= (count 3 2 ?num)
(not (true (cell 3 2 black)))
(count 4 2 ?num))

(<= (count 4 2 ?num)
(true (cell 4 2 black))
(succ ?prevnum ?num)
(count 1 3 ?prevnum))
(<= (count 4 2 ?num)
(not (true (cell 4 2 black)))
(count 1 3 ?num))

(<= (count 1 3 ?num)
(true (cell 1 3 black))
(succ ?prevnum ?num)
(count 2 3 ?prevnum))
(<= (count 1 3 ?num)
(not (true (cell 1 3 black)))
(count 2 3 ?num))

(<= (count 2 3 ?num)
(true (cell 2 3 black))
(succ ?prevnum ?num)
(count 3 3 ?prevnum))
(<= (count 2 3 ?num)
(not (true (cell 2 3 black)))
(count 3 3 ?num))

(<= (count 3 3 ?num)
(true (cell 3 3 black))
(succ ?prevnum ?num)
(count 4 3 ?prevnum))
(<= (count 3 3 ?num)
(not (true (cell 3 3 black)))
(count 4 3 ?num))

(<= (count 4 3 ?num)
(true (cell 4 3 black))
(succ ?prevnum ?num)
(count 1 4 ?prevnum))
(<= (count 4 3 ?num)
(not (true (cell 4 3 black)))
(count 1 4 ?num))

(<= (count 1 4 ?num)
(true (cell 1 4 black))
(succ ?prevnum ?num)
(count 2 4 ?prevnum))
(<= (count 1 4 ?num)
(not (true (cell 1 4 black)))
(count 2 4 ?num))

(<= (count 2 4 ?num)
(true (cell 2 4 black))
(succ ?prevnum ?num)
(count 3 4 ?prevnum))
(<= (count 2 4 ?num)
(not (true (cell 2 4 black)))
(count 3 4 ?num))

(<= (count 3 4 ?num)
(true (cell 3 4 black))
(succ ?prevnum ?num)
(count 4 4 ?prevnum))
(<= (count 3 4 ?num)
(not (true (cell 3 4 black)))
(count 4 4 ?num))

(<= (count 4 4 1)
(true (cell 4 4 black)))

(<= (count 4 4 0)
(not (true (cell 4 4 black))))

(<= (count 6 6 ?num)
(true (cell 6 6 white))
(succ ?prevnum ?num)
(count 7 6 ?prevnum))
(<= (count 6 6 ?num)
(not (true (cell 6 6 white)))
(count 7 6 ?num))

(<= (count 7 6 ?num)
(true (cell 7 6 white))
(succ ?prevnum ?num)
(count 8 6 ?prevnum))
(<= (count 7 6 ?num)
(not (true (cell 7 6 white)))
(count 8 6 ?num))

(<= (count 8 6 ?num)
(true (cell 8 6 white))
(succ ?prevnum ?num)
(count 9 6 ?prevnum))
(<= (count 8 6 ?num)
(not (true (cell 8 6 white)))
(count 9 6 ?num))

(<= (count 9 6 ?num)
(true (cell 9 6 white))
(succ ?prevnum ?num)
(count 6 7 ?prevnum))
(<= (count 9 6 ?num)
(not (true (cell 9 6 white)))
(count 6 7 ?num))

(<= (count 6 7 ?num)
(true (cell 6 7 white))
(succ ?prevnum ?num)
(count 7 7 ?prevnum))
(<= (count 6 7 ?num)
(not (true (cell 6 7 white)))
(count 7 7 ?num))

(<= (count 7 7 ?num)
(true (cell 7 7 white))
(succ ?prevnum ?num)
(count 8 7 ?prevnum))
(<= (count 7 7 ?num)
(not (true (cell 7 7 white)))
(count 8 7 ?num))

(<= (count 8 7 ?num)
(true (cell 8 7 white))
(succ ?prevnum ?num)
(count 9 7 ?prevnum))
(<= (count 8 7 ?num)
(not (true (cell 8 7 white)))
(count 9 7 ?num))

(<= (count 9 7 ?num)
(true (cell 9 7 white))
(succ ?prevnum ?num)
(count 6 8 ?prevnum))
(<= (count 9 7 ?num)
(not (true (cell 9 7 white)))
(count 6 8 ?num))

(<= (count 6 8 ?num)
(true (cell 6 8 white))
(succ ?prevnum ?num)
(count 7 8 ?prevnum))
(<= (count 6 8 ?num)
(not (true (cell 6 8 white)))
(count 7 8 ?num))

(<= (count 7 8 ?num)
(true (cell 7 8 white))
(succ ?prevnum ?num)
(count 8 8 ?prevnum))
(<= (count 7 8 ?num)
(not (true (cell 7 8 white)))
(count 8 8 ?num))

(<= (count 8 8 ?num)
(true (cell 8 8 white))
(succ ?prevnum ?num)
(count 9 8 ?prevnum))
(<= (count 8 8 ?num)
(not (true (cell 8 8 white)))
(count 9 8 ?num))

(<= (count 9 8 ?num)
(true (cell 9 8 white))
(succ ?prevnum ?num)
(count 6 9 ?prevnum))
(<= (count 9 8 ?num)
(not (true (cell 9 8 white)))
(count 6 9 ?num))

(<= (count 6 9 ?num)
(true (cell 6 9 white))
(succ ?prevnum ?num)
(count 7 9 ?prevnum))
(<= (count 6 9 ?num)
(not (true (cell 6 9 white)))
(count 7 9 ?num))

(<= (count 7 9 ?num)
(true (cell 7 9 white))
(succ ?prevnum ?num)
(count 8 9 ?prevnum))
(<= (count 7 9 ?num)
(not (true (cell 7 9 white)))
(count 8 9 ?num))

(<= (count 8 9 ?num)
(true (cell 8 9 white))
(succ ?prevnum ?num)
(count 9 9 ?prevnum))
(<= (count 8 9 ?num)
(not (true (cell 8 9 white)))
(count 9 9 ?num))

(<= (count 9 9 1)
(true (cell 9 9 white)))

(<= (count 9 9 0)
(not (true (cell 9 9 white))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;arithmentic - stupid
;;;;;;;;;;;;;;;;;;;;;;;;;;;;